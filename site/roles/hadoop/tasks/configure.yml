---

#- name: export hadoop exes
#  shell: export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
#  args:
#   executable: /bin/bash
   
- name: create node directories
  file: path={{ item }} state=directory
  with_items:
    - "{{ hadoop_home }}/namenode"
    - "{{ hadoop_home }}/datanode"
  notify:
    - formatHadoopNodeName
    - stopDFS
    - stopYarn
    - startDFS
    - startYarn
    - restart hadoop-dfs
    - restart yarn-resourcemanager
    - restart hadoop-datanode
    - restart yarn-nodemanager
   
- lineinfile:
    dest: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    regexp: 'JAVA_HOME='
    line: 'export JAVA_HOME=/usr/lib/jvm/jre-1.7.0-openjdk'

- template: src=bashprofile.sh.j2 dest="/etc/profile.d/hadoop.sh" owner=root group=root   
        
- template: src=yarn-site.xml dest="{{ hadoop_home }}/etc/hadoop/yarn-site.xml" owner=root group=root
  notify:
   - restart hadoop-dfs
   - restart yarn-resourcemanager
   - restart hadoop-datanode
   - restart yarn-nodemanager

- template: src=core-site.xml dest="{{ hadoop_home }}/etc/hadoop/core-site.xml" owner=root group=root
  notify:
   - restart hadoop-dfs
   - restart yarn-resourcemanager
   - restart hadoop-datanode
   - restart yarn-nodemanager

- template: src=hdfs-site.xml dest="{{ hadoop_home }}/etc/hadoop/hdfs-site.xml" owner=root group=root
  notify:
   - restart hadoop-dfs
   - restart yarn-resourcemanager
   - restart hadoop-datanode
   - restart yarn-nodemanager

- template: src=mapred-site.xml dest="{{ hadoop_home }}/etc/hadoop/mapred-site.xml" owner=root group=root
  notify:
   - restart hadoop-dfs
   - restart yarn-resourcemanager
   - restart hadoop-datanode
   - restart yarn-nodemanager
      
- template: src=slaves dest="{{ hadoop_home }}/etc/hadoop/slaves" owner=root group=root
  notify:
   - refreshDFSNodes
   - refreshYarnNodes
   - restart hadoop-datanode
   - restart yarn-nodemanager

#- command: "{{ hadoop_home }}/bin/hdfs namenode -format creates=/tmp/hadoop-root/dfs/name"
#  when: (hadoop_type_of_node == 'master') or (hadoop_type_of_node == 'namenode')

#- iptables: chain=INPUT jump=ACCEPT protocol=tcp destination_port={{item}}
#  ignore_errors: yes
#  with_items:
#  - 8088
#  - 50030
#  - 8030
#  - 8031
#  - 8032

#- name: Open all ports from ip {{ item.1 }} in the firewall
#  iptables: chain=INPUT jump=ACCEPT protocol=tcp source {{ item.1 }}
#  ignore_errors: yes
#  with_together:
#      - groups.all
#      - ansible_all_ipv4_addresses


